package service.logic;

import java.util.ArrayList;
import java.util.List;

import domain.BaseballTeam;
import domain.Player;
import service.BaseballTeamService;
import store.BaseballTeamStore;
import store.PlayerStore;
import store.logic.BaseballTeamStoreLogic;
import store.logic.PlayerStoreLogic;

public class BaseballTeamServiceLogic implements BaseballTeamService{
	
	private BaseballTeamStore teamStore;
	private PlayerStore playerStore;
	
	public BaseballTeamServiceLogic() {
		teamStore = new BaseballTeamStoreLogic();
		playerStore = new PlayerStoreLogic();
	}

	@Override
	public BaseballTeam findTeam(String teamId) {
		BaseballTeam team = ;
		team.setPlayers(playerStore.retrieveByTeam(teamId));
		return teamStore.retrieve(teamId);
	}

	@Override
	public List<BaseballTeam> findAllTeams() {
		return teamStore.retrieveAll();
	}

	@Override
	public List<BaseballTeam> findAllTeamsWithPlayers() {
		List<BaseballTeam> list = teamStore.retrieveAll();
		for(BaseballTeam team : list){
			team.setPlayers(playerStore.retrieveByTeam(team.getTeamId()));
		}
		return list;
	}

	@Override
	public List<BaseballTeam> findTradeTargetPalyers(String teamId) {
		List<BaseballTeam> list = teamStore.retrieveAll();
		for(BaseballTeam team : list){
			if(team.getTeamId() == teamId) continue;
			team.setPlayers(playerStore.retrieveByTeam(team.getTeamId()));
		}
		return list;
	}

	@Override
	public Player findPlayer(String playerId) {
		return playerStore.retrieve(playerId);
	}

	@Override
	public void tradePlayer(String sourcePlayerId, String targetPlayerId) {
		Player source = findPlayer(sourcePlayerId);
		Player target = findPlayer(targetPlayerId);
		String teamId = source.getTeamId();
		source.setTeamId(target.getTeamId());
		target.setTeamId(teamId);
		playerStore.update(source);
		playerStore.update(target);
	}

}
